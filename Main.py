import telebot
from api_key import API_KEY
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from telegram_bot_calendar import DetailedTelegramCalendar, WMonthTelegramCalendar,  LSTEP
import datetime
from database_function import get_data_from_database
from calenar import generate_month_selector, generate_date_selector, generate_callback_month_selector
import json
import calendar

bot = telebot.TeleBot(API_KEY)

current_date = datetime.datetime.today().strftime('%Y-%m-%d').split('-')


rent_request = {
    'come': None,
    'leave': None,
    'glamp_id': None,
}

glamp_messages_id = []

# --------------------- message_handler ----------------------


@bot.message_handler(commands=['start'])
def reply_start_command(message: Message):
    markup = InlineKeyboardMarkup(row_width=1)
    btn1 = InlineKeyboardButton(
        "üèï –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ê-—Ñ—Ä–µ–π–º–∏", callback_data='seeprojects')
    btn2 = InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏", callback_data='rent')
    btn3 = InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')
    btn4 = InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data='contacts')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id,
                     """
–ü—Ä–∏–≤—ñ—Ç! üëã –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∑–∞—Ç–∏—à–Ω–∏–π –ê-—Ñ—Ä–µ–π–º —É –Ω–∞—à–æ–º—É –≥–ª–µ–º–ø—ñ–Ω–≥—É. –í–∏–±–µ—Ä–∏ –¥—ñ—é: """,
                     reply_markup=markup)


@bot.message_handler(commands=['book'])
def photo_resp(message: Message):
    bd_resp = get_data_from_database()
    for glamp in bd_resp:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            text='–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏', callback_data=f"rent_{glamp[0]}"))
        photo_message = bot.send_photo(message.chat.id, glamp[1], caption=f"""{glamp[2]}
–¶—ñ–Ω–∞ : {glamp[3]}$
–†–æ–∑–º—ñ—Ä : {glamp[4]}–∫–≤. –º.""", reply_markup=markup)
        glamp_messages_id.append(photo_message.id)


@bot.message_handler(commands=['contacts'])
def contacts_handler(message: Message):
    markup = InlineKeyboardMarkup(row_width=1)
    map_open_btn = InlineKeyboardButton(
        "üìç –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –∫–∞—Ä—Ç–∞—Ö", callback_data=',')
    call_btn = InlineKeyboardButton("üìû –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏", callback_data=',')
    markup.add(map_open_btn, call_btn)
    bot.send_message(message.chat.id, """
–ù–∞—à–∞ –∞–¥—Ä–µ—Å–∞ : *–∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
–¢–µ–ª–µ—Ñ–æ–Ω:
""", reply_markup=markup)


@bot.message_handler(commands=['help'])
def contacts_handler(message: Message):
    bot.send_message(message.chat.id, """–û—Å—å —â–æ —è –≤–º—ñ—é:
/book ‚Äì –†–æ–∑–ø–æ—á–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
/my_bookings ‚Äì –ú–æ—ó –±—Ä–æ–Ω—ñ
/cancel ‚Äì –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é
/contacts ‚Äì –ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –∞–¥—Ä–µ—Å–∞
""")

# @bot.message_handler(commands=['photo'])
# def send_photo(message : Message):
#     bot.send_photo(message.chat.id, )


# @bot.message_handler(commands=['book'])
# def start(message: Message):
#     calendar, step = WMonthTelegramCalendar(calendar_id=1).build()
#     bot.send_message(message.chat.id,
#                      '–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –∑–∞—ó–∑–¥—É',
#                      reply_markup=calendar)

# ------------------------ callback query handler ----------------------


@bot.callback_query_handler(lambda query: query.data.startswith('rent_'))
def rent_handler(callback: CallbackQuery):
    rent_request['glamp_id'] = callback.data.split('_')[1]
    for id in glamp_messages_id:
        try:
            bot.delete_message(callback.from_user.id, id)
        except Exception:
            pass
    bot.send_message(callback.from_user.id,
                     '–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—ó–∑–¥—É',
                     reply_markup=generate_month_selector())


@bot.message_handler(commands=["faq"])
def faq_handler(message):
    markup = InlineKeyboardMarkup(row_width=1)
    btn1 = InlineKeyboardButton("‚ùî –ü—Ä–∞–≤–∏–ª–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data="rules")
    btn2 = InlineKeyboardButton('üõ† –©–æ –≤–∑—è—Ç–∏ —ñ–∑ —Å–æ–±–æ—é?', callback_data="things")
    btn3 = InlineKeyboardButton("üê∂ –ú–æ–∂–Ω–∞ –∑ –≤–∏—Ö–æ–≤–∞–Ω—Ü—è–º–∏?", callback_data="pets")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.from_user.id,
                     "–ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=markup)


@bot.callback_query_handler(lambda query: query.data == 'investments')
def investments_handler(callback: CallbackQuery):
    bot.send_message(callback.message.chat.id, 'investments')


@bot.callback_query_handler(lambda query: query.data == 'help')
def investments_handler(callback: CallbackQuery):
    bot.send_message(callback.message.chat.id, """–û—Å—å —â–æ —è –≤–º—ñ—é:
/book ‚Äì –†–æ–∑–ø–æ—á–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
/my_bookings ‚Äì –ú–æ—ó –±—Ä–æ–Ω—ñ
/cancel ‚Äì –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é
/contacts ‚Äì –ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –∞–¥—Ä–µ—Å–∞  
""")


@bot.callback_query_handler(lambda query: query.data == 'seeprojects')
def investments_handler(callback: CallbackQuery):
    bot.send_message(callback.message.chat.id, 'seeprojects')


@bot.callback_query_handler(lambda query: query.data == 'contacts')
def investments_handler(callback: CallbackQuery):
    bot.send_message(callback.message.chat.id, 'contacts')

@bot.callback_query_handler(func=lambda query: query.data.startswith('date_') or query.data.startswith('date2_'))
def calendar_handler(callback: CallbackQuery):
    month = callback.data.split('_')[1]
    date = callback.data.split('_')[2]
    if callback.data.startswith('date_'):
        rent_request['come'] = datetime.date(datetime.datetime.now(
        ).year, list(calendar.month_name).index(month), int(date))
    if callback.data.startswith('date2_'):
        rent_request['leave'] = datetime.date(datetime.datetime.now(
        ).year, list(calendar.month_name).index(month), int(date))
    bot.delete_message(callback.from_user.id, callback.message.id)
    if callback.data.startswith('date_'):
        bot.send_message(callback.from_user.id, '–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—ó–∑–¥—É',
                         reply_markup=generate_callback_month_selector(month, date))
    elif callback.data.startswith('date2_'):
        bot.send_message(callback.from_user.id,
                         f"–í–∏ –∑–∞–º–æ–≤–∏–ª–∏ –≥–ª–µ–º–ø –≤—ñ–¥ {rent_request['come']} –¥–æ {rent_request['leave']}")


@bot.callback_query_handler(func=lambda query: query.data == '1' or query.data == '2' or query.data == '3' or query.data == '4' or query.data == '5')
def number_handler(callback: CallbackQuery):
    bot.send_message(callback.from_user.id, f"""–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "–í–∏–±—Ä–∞–Ω–æ: –ê-—Ñ—Ä–µ–π–º ¬´–õ—ñ—Å–æ–≤–∏–π¬ª
–î–∞—Ç–∞: {rent_request['come']} - {rent_request['leave']}
–ì–æ—Å—Ç—ñ: {callback.data}
–í–∞—Ä—Ç—ñ—Å—Ç—å: 100$
–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –±—Ä–æ–Ω—é?
""")


@bot.callback_query_handler(func=lambda query: query.data.startswith('calendar_') or query.data.startswith('calendar2_'))
def month_selector_handler(callback: CallbackQuery):
    bot.delete_message(callback.from_user.id, callback.message.id)
    if callback.data.startswith('calendar_'):
        bot.send_message(callback.from_user.id, "choose date", reply_markup=generate_date_selector(
            callback.data.split('_')[1], rent_request['glamp_id']))
    elif callback.data.startswith('calendar2_'):
        bot.send_message(callback.from_user.id, "choose date", reply_markup=generate_date_selector(
            callback.data.split('_')[1], rent_request['glamp_id'], callback.data.split('_')[2], callback.data.split('_')[3]))


@bot.callback_query_handler(lambda query: query.data == "rules")
def rules_callback_handler(callback: CallbackQuery):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚¨ÖÔ∏è  –ù–∞–∑–∞–¥', callback_data='back_to_faq'))
    bot.delete_message(callback.from_user.id, callback.message.id)
    bot.send_message(callback.from_user.id,
                     "–ü—Ä–∞–≤–∏–ª–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:–í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ –ø–æ–≤–Ω–∏–º –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –∫–æ—à—Ç—ñ–≤ –¥–æ 14 –¥–Ω—ñ–≤,–ø—ñ—Å–ª—è –≤–∂–µ —á–∞—Å—Ç–∏–Ω–Ω–æ", reply_markup=markup)

@bot.callback_query_handler(lambda query: query.data == 'back_to_faq')
def faq_handler(callback: CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    bot.delete_message(callback.from_user.id, callback.message.id)
    btn1 = InlineKeyboardButton("‚ùî –ü—Ä–∞–≤–∏–ª–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data="rules")
    btn2 = InlineKeyboardButton('üõ† –©–æ –≤–∑—è—Ç–∏ —ñ–∑ —Å–æ–±–æ—é?', callback_data="things")
    btn3 = InlineKeyboardButton("üê∂ –ú–æ–∂–Ω–∞ –∑ –≤–∏—Ö–æ–≤–∞–Ω—Ü—è–º–∏?", callback_data="pets")
    markup.add(btn1, btn2, btn3)
    bot.send_message(callback.from_user.id,
                     "–ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=markup)

@bot.callback_query_handler(lambda query: query.data == "things")
def things_callback_handler(callback):
    bot.delete_message(callback.from_user.id, callback.message.id)
    bot.send_message(callback.from_user.id,
                     "–©–æ –≤–∑—è—Ç–∏ —ñ–∑ —Å–æ–±–æ—é?-–†–∞–¥–∏–º–æ –≤–∞–º –≤–∑—è—Ç–∏ —ñ–∑ —Å–æ–±–æ—é –æ–¥—è–≥,–≤–∑—É—Ç—Ç—è —Ç–∞ –∑–∞—Å–æ–±–∏ –≥—ñ–≥—ñ—î–Ω–∏")


@bot.callback_query_handler(lambda query: query.data == "pets")
def pets_callback_handler(callback):
    bot.delete_message(callback.from_user.id, callback.message.id)
    bot.send_message(callback.from_user.id, "–ú–æ–∂–Ω–∞ –∑ –≤–∏—Ö–æ–≤–∞–Ω—Ü—è–º–∏?-–¢–∞–∫ –º–æ–∂–Ω–∞")


bot.infinity_polling()
